import uuid
from datetime import timedelta, datetime

from django.db import models, IntegrityError
from django.utils.dateparse import parse_datetime

from farms.models.peripheral import PeripheralComponent


class DataPointType(models.Model):
    """The type of data stored and the unit the value is stored as."""

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False,)
    name = models.CharField(
        max_length=50, help_text="The name, e.g., air temperature or acidity."
    )
    unit = models.CharField(
        max_length=20, help_text="The unit of the value, e.g., °C or pH."
    )

    def __str__(self):
        return f"{self.name} in {self.unit}"


class DataPoint(models.Model):
    """Data points generated by peripherals, described by the data point type."""

    time = models.DateTimeField(primary_key=True, default=datetime.now)
    peripheral_component = models.ForeignKey(
        PeripheralComponent,
        on_delete=models.CASCADE,
        help_text="The peripheral that generated the data point.",
    )
    data_point_type = models.ForeignKey(
        DataPointType,
        on_delete=models.CASCADE,
        help_text="The type of data recorded and its unit.",
    )
    value = models.FloatField(
        help_text="The value of the data given by the data point type and peripheral."
    )

    def save(self, *args, **kwargs):
        self.save_and_smear_timestamp(*args, **kwargs)

    def save_and_smear_timestamp(self, *args, **kwargs):
        """Recursivly try to save by incrementing the timestamp on duplicate error"""
        try:
            super().save(*args, **kwargs)
        except IntegrityError as exception:
            # Only handle the error:
            #   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "1_1_farms_sensorreading_pkey"
            #   DETAIL:  Key ("time")=(2020-10-01 22:33:52.507782+00) already exists.
            if all(k in exception.args[0] for k in ("Key", "time", "already exists")):
                # Increment the timestamp by 1 µs and try again
                self.time = str(parse_datetime(self.time) + timedelta(microseconds=1))
                self.save_and_smear_timestamp(*args, **kwargs)

    def __str__(self):
        return f"{self.value} {self.data_point_type.unit} from {self.peripheral_component.site_entity.name}"
