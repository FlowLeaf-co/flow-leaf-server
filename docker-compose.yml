version: "3"
services:

## SSL Front End
  nginx-proxy:
    image: nginx
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx-conf.d:/etc/nginx/conf.d
      - nginx-vhost.d:/etc/nginx/vhost.d
      - nginx-certs:/etc/nginx/certs:ro
      - nginx-data:/usr/share/nginx/html
    logging:
      options:
        max-size: '4m'
        max-file: '10'
    networks:
      - frontend

  nginx-gen:
    image: jwilder/docker-gen
    command: -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    container_name: nginx-gen
    restart: always
    volumes:
      - nginx-conf.d:/etc/nginx/conf.d
      - nginx-vhost.d:/etc/nginx/vhost.d
      - nginx-certs:/etc/nginx/certs:ro
      - nginx-data:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    networks:
      - frontend

  nginx-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-letsencrypt
    restart: always
    volumes:
      - nginx-conf.d:/etc/nginx/conf.d
      - nginx-vhost.d:/etc/nginx/vhost.d
      - nginx-certs:/etc/nginx/certs:rw
      - nginx-data:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      NGINX_DOCKER_GEN_CONTAINER: nginx-gen
      NGINX_PROXY_CONTAINER: nginx-proxy
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    networks:
      - frontend

## App Frontend
  nginx-web:
    build: nginx
    container_name: nginx-web
    restart: always
    env_file:
      - 'nginx/dns.nginx'
    volumes:
      - jekyll-data:/usr/share/nginx/html
    logging:
      options:
        max-size: '4m'
        max-file: '10'
    networks:
      - frontend

  core:
    build: ./core
    container_name: core
    restart: always
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'core/dns.core'
      - 'core/env.core'
      - 'core/secrets.core'
      - 'core/env.rabbitmq'
      - 'core/secrets.rabbitmq'
      - 'grafana/env.grafana'
      - 'grafana/secrets.grafana'
      - 'influxdb/secrets.influxdb'
    networks:
      - backend
      - frontend
    depends_on:
      - influxdb
      - grafana
      - postgres

  grafana:
    image: grafana/grafana:4.6.3
    container_name: grafana
    restart: always
    env_file:
      - 'grafana/dns.grafana'
      - 'grafana/env.grafana'
      - 'grafana/secrets.grafana'
    networks:
      - backend
      - frontend
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - influxdb

  planner:
    build: ./planner
    container_name: planner
    restart: always
    logging:
      options:
        max-size: '2m'
        max-file: '10'
    env_file:
      - 'planner/dns.planner'
    networks:
      - frontend
    depends_on:
      - core

## App Backend
  postgres:
    build: ./postgres
    container_name: postgres
    restart: always
    env_file:
      - 'postgres/secrets.postgres'
    networks:
      - backend
    volumes:
      - postgres-data:/var/lib/postgresql/data

  influxdb:
    image: influxdb:1.5
    container_name: influxdb
    restart: always
    ports:
      - "8086:8086"
    env_file:
      - 'influxdb/env.influxdb'
      - 'influxdb/secrets.influxdb'
    networks:
      - backend
    volumes:
      - influxdb-data:/var/lib/influxdb
    
  rabbitmq:
    image: rabbitmq:3
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
    env_file:
      - 'core/env.rabbitmq'
      - 'core/secrets.rabbitmq'
    networks:
      - backend
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

networks:
  backend:
  frontend:

volumes:
  influxdb-data:
  grafana-data:
  postgres-data:
  jekyll-data:
  rabbitmq-data:
  
  nginx-conf.d:
  nginx-vhost.d:
  nginx-certs:
  nginx-data:
